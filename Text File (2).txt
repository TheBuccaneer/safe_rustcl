Kannst du aus den Gesprächen nochmal herauslesen, was wir messen wollten?
Kannst du aus den Gesprächen nochmal herauslesen, was wir messen wollten?
Ihr wart darauf fokussiert, folgende Messungen durchzuführen und zu belegen:

Wrapper-Overhead
Vergleich zwischen reiner OpenCL-Variante (vec_add_raw.rs) und Safe-RustCL-Wrapper (vec_add.rs) in identischer, serieller Ausführung. Ziel: Nachweis, dass der Wrapper-Overhead < 1% beträgt.

Overlap-Speed-Up
Vergleich zwischen strikt serieller Ausführung (vec_add_serial.rs) und überlappender Pipeline (vec_add_overlap.rs oder – noch präziser – vec_add_overlap_fast.rs), um zu zeigen, um welchen Faktor (z. B. ≥ 1,5×) sich Gesamtlatenz reduziert, wenn Uploads und Kernel parallel laufen.

Busy-vs-Idle-Analyse
Aus den MemTrace-CSV­s: Summation aller aktiven GPU-Phasen (H2D, Kernel, D2H) vs. aller Idle-Intervalle, um die effektive Auslastung der GPU zu quantifizieren.

Timeline & Throughput
Aus MemTrace-CSV­s: Zeitachsenvisualisierung der einzelnen Phasen mit annotierten Bandbreiten (GiB/s) für Upload und Download, um zu zeigen, wo die Latenz sitzt und wo Overlap greift.

Kernel-Latenz-Verteilung
Aus Criterion sample_times.json und estimates.json: Box- oder Violin-Plots der Kernel-Latenzen (µs) für verschiedene Problemgrößen (1 Ki, 16 Ki, 256 Ki, 4 Mi Elemente), inklusive Mittelwerte und Konfidenzintervalle.

Skalierungsstory
Beobachtung, wie sich Overhead-Dominanz (bei kleinen Größen) in Bandbreiten-Limitation (ab ≈ 256 KiB) wandelt, und wie der Wrapper-Overhead konstant gering bleibt.

Safety-Checks
a) Unsafe-Footprint via cargo-geiger: Nachweis, dass das eigene Crate nur wenige (≈ 6) unsafe-Blocks nutzt, der Großteil in Dependencies liegt.
b) Undefined-Behavior-Check via Miri auf rein-Rust-Code (Dummy-Typestate-Tests), um UB-Freiheit in Safe-Modulen zu garantieren.

Reproduzierbarkeit & Varianz
Mehrfache Runs (Criterion oder Hyperfine) mit σ < 2% bzw. P95/P5-Streuung, um deterministische Messungen sicherzustellen.

Diese Messungen zusammen belegen die Kern-Claims eures Papers: Safety (minimaler unsafe-Footprint, UB-frei), Ergonomie (Wrapper-API), P
